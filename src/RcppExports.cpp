// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// harmwg
SEXP harmwg(Function Model, List Data, int Iterations, int Status, int Thinning, double Acceptance, NumericMatrix Dev, int LIV, NumericMatrix Mon, List Mo0, NumericMatrix thinned);
RcppExport SEXP _YABS_harmwg(SEXP ModelSEXP, SEXP DataSEXP, SEXP IterationsSEXP, SEXP StatusSEXP, SEXP ThinningSEXP, SEXP AcceptanceSEXP, SEXP DevSEXP, SEXP LIVSEXP, SEXP MonSEXP, SEXP Mo0SEXP, SEXP thinnedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< List >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< int >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< int >::type Status(StatusSEXP);
    Rcpp::traits::input_parameter< int >::type Thinning(ThinningSEXP);
    Rcpp::traits::input_parameter< double >::type Acceptance(AcceptanceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dev(DevSEXP);
    Rcpp::traits::input_parameter< int >::type LIV(LIVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mon(MonSEXP);
    Rcpp::traits::input_parameter< List >::type Mo0(Mo0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thinned(thinnedSEXP);
    rcpp_result_gen = Rcpp::wrap(harmwg(Model, Data, Iterations, Status, Thinning, Acceptance, Dev, LIV, Mon, Mo0, thinned));
    return rcpp_result_gen;
END_RCPP
}
// harm
SEXP harm(Function Model, List Data, int Iterations, int Status, int Thinning, double Acceptance, NumericMatrix Dev, int LIV, NumericMatrix Mon, List Mo0, NumericMatrix thinned);
RcppExport SEXP _YABS_harm(SEXP ModelSEXP, SEXP DataSEXP, SEXP IterationsSEXP, SEXP StatusSEXP, SEXP ThinningSEXP, SEXP AcceptanceSEXP, SEXP DevSEXP, SEXP LIVSEXP, SEXP MonSEXP, SEXP Mo0SEXP, SEXP thinnedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< List >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< int >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< int >::type Status(StatusSEXP);
    Rcpp::traits::input_parameter< int >::type Thinning(ThinningSEXP);
    Rcpp::traits::input_parameter< double >::type Acceptance(AcceptanceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dev(DevSEXP);
    Rcpp::traits::input_parameter< int >::type LIV(LIVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mon(MonSEXP);
    Rcpp::traits::input_parameter< List >::type Mo0(Mo0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thinned(thinnedSEXP);
    rcpp_result_gen = Rcpp::wrap(harm(Model, Data, Iterations, Status, Thinning, Acceptance, Dev, LIV, Mon, Mo0, thinned));
    return rcpp_result_gen;
END_RCPP
}
// sharm
SEXP sharm(Function Model, List Data, int Iterations, int Status, int Thinning, double Acceptance, NumericMatrix Dev, double h, int LIV, NumericMatrix Mon, List Mo0, NumericMatrix thinned);
RcppExport SEXP _YABS_sharm(SEXP ModelSEXP, SEXP DataSEXP, SEXP IterationsSEXP, SEXP StatusSEXP, SEXP ThinningSEXP, SEXP AcceptanceSEXP, SEXP DevSEXP, SEXP hSEXP, SEXP LIVSEXP, SEXP MonSEXP, SEXP Mo0SEXP, SEXP thinnedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< List >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< int >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< int >::type Status(StatusSEXP);
    Rcpp::traits::input_parameter< int >::type Thinning(ThinningSEXP);
    Rcpp::traits::input_parameter< double >::type Acceptance(AcceptanceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dev(DevSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type LIV(LIVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mon(MonSEXP);
    Rcpp::traits::input_parameter< List >::type Mo0(Mo0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thinned(thinnedSEXP);
    rcpp_result_gen = Rcpp::wrap(sharm(Model, Data, Iterations, Status, Thinning, Acceptance, Dev, h, LIV, Mon, Mo0, thinned));
    return rcpp_result_gen;
END_RCPP
}
// nutsda
SEXP nutsda(Function Model, List Data, int Iterations, int Status, double h, int Thinning, double Acceptance, NumericMatrix Dev, int M_adap, int LIV, NumericMatrix Mon, List Mo0, NumericMatrix thinned);
RcppExport SEXP _YABS_nutsda(SEXP ModelSEXP, SEXP DataSEXP, SEXP IterationsSEXP, SEXP StatusSEXP, SEXP hSEXP, SEXP ThinningSEXP, SEXP AcceptanceSEXP, SEXP DevSEXP, SEXP M_adapSEXP, SEXP LIVSEXP, SEXP MonSEXP, SEXP Mo0SEXP, SEXP thinnedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< List >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< int >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< int >::type Status(StatusSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type Thinning(ThinningSEXP);
    Rcpp::traits::input_parameter< double >::type Acceptance(AcceptanceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dev(DevSEXP);
    Rcpp::traits::input_parameter< int >::type M_adap(M_adapSEXP);
    Rcpp::traits::input_parameter< int >::type LIV(LIVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mon(MonSEXP);
    Rcpp::traits::input_parameter< List >::type Mo0(Mo0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thinned(thinnedSEXP);
    rcpp_result_gen = Rcpp::wrap(nutsda(Model, Data, Iterations, Status, h, Thinning, Acceptance, Dev, M_adap, LIV, Mon, Mo0, thinned));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_YABS_harmwg", (DL_FUNC) &_YABS_harmwg, 11},
    {"_YABS_harm", (DL_FUNC) &_YABS_harm, 11},
    {"_YABS_sharm", (DL_FUNC) &_YABS_sharm, 12},
    {"_YABS_nutsda", (DL_FUNC) &_YABS_nutsda, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_YABS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
